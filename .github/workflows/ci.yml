name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12, 3.13]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gnupg
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Playwright browsers
      run: |
        playwright install chromium
        playwright install-deps chromium

    - name: Create test environment variables
      run: |
        echo "GITHUB_ACTIONS=true" >> $GITHUB_ENV
        echo "CI=true" >> $GITHUB_ENV

    - name: Run linting with flake8 (if available)
      run: |
        # Install flake8 for basic linting
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true

    - name: Run type checking with mypy (if available)
      run: |
        pip install mypy types-requests types-PyYAML
        mypy --install-types --non-interactive --ignore-missing-imports .
      continue-on-error: true

    - name: Run tests with pytest
      run: |
        python -m pytest -v --tb=short --maxfail=5
      env:
        # Set test environment variables to prevent API calls during testing
        OPENAI_API_KEY: test_key_for_ci
        GOOGLE_API_KEY: test_key_for_ci
        ANTHROPIC_API_KEY: test_key_for_ci
        DEEPSEEK_API_KEY: test_key_for_ci
        SUPABASE_URL: https://test.supabase.co
        SUPABASE_KEY: test_key_for_ci

    - name: Generate test coverage report
      run: |
        pip install coverage
        coverage run -m pytest
        coverage report -m
        coverage xml
      continue-on-error: true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      continue-on-error: true

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.13

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run safety check for vulnerabilities
      run: |
        safety check --json || true
      continue-on-error: true

    - name: Run bandit security scan
      run: |
        bandit -r . -f json || true
      continue-on-error: true

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub (optional)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      continue-on-error: true

    - name: Build Docker image
      run: |
        # Create a simple Dockerfile if it doesn't exist
        if [ ! -f Dockerfile ]; then
          cat > Dockerfile << 'EOF'
        FROM python:3.13-slim

        WORKDIR /app

        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            wget \
            gnupg \
            && rm -rf /var/lib/apt/lists/*

        # Copy requirements and install Python dependencies
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt

        # Install Playwright browsers
        RUN playwright install chromium
        RUN playwright install-deps chromium

        # Copy application code
        COPY . .

        # Run tests to ensure the image works
        RUN python -m pytest --tb=short

        # Set the default command
        CMD ["python", "pipeline.py"]
        EOF
        fi
        
        docker build -t tackle4loss-news-collection:latest .
      continue-on-error: true

  notify:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' }}
      run: |
        echo "✅ All tests passed successfully!"
        echo "Build status: SUCCESS"
        
    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' }}
      run: |
        echo "❌ Tests failed!"
        echo "Build status: FAILURE"
        exit 1
